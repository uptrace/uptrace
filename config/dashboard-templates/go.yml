schema: v1
id: uptrace.go.runtime_by_service_host
name: 'Go: Runtime'

table:
  gauges:
    - name: Number of hosts
      description: Number of host.name
      metrics:
        - process.runtime.go.goroutines as $goroutines
      query:
        - uniq($goroutines.host.name) as num_host
      template: ${num_host} hosts

    - name: Number of services
      description: Number of service.name
      metrics:
        - process.runtime.go.goroutines as $goroutines
      query:
        - uniq($goroutines.service.name) as num_service
      template: ${num_service} services

    - name: Max GC pause
      description: Max garbage collector pause
      metrics:
        - process.runtime.go.gc.pause_ns as $gc_pause
      query:
        - max($gc_pause) as max_gc_pause
      columns:
        max_gc_pause: { unit: nanoseconds }

    - name: Total heap in use
      description: Total heap memory in use
      metrics:
        - process.runtime.go.mem.heap_inuse as $mem_in_use
      query:
        - $mem_in_use
      columns:
        mem_in_use: { unit: bytes }

    - name: Total heap objects
      description: Total heap live objects
      metrics:
        - process.runtime.go.mem.heap_objects as $heap_objects
      query:
        - $heap_objects

  metrics:
    - process.runtime.go.gc.pause_ns as $gc_pause
    - process.runtime.go.mem.heap_inuse as $mem_in_use
    - process.runtime.go.mem.heap_objects as $heap_objects
    - process.runtime.go.goroutines as $goroutines
  query:
    - group by service.name
    - group by host.name
    - max($gc_pause) as max_gc_pause
    - $mem_in_use
    - $heap_objects
    - $goroutines
  columns:
    max_gc_pause: { unit: nanoseconds }

grid:
  - name: Max GC stop-the-world pause
    metrics:
      - process.runtime.go.gc.pause_ns as $gc_pause
    query:
      - max($gc_pause) as gc_pause_max
    columns:
      gc_pause_max: { unit: nanoseconds }

  - name: Number of completed garbage collection cycles
    metrics:
      - process.runtime.go.gc.count as $gc_count
    query:
      - per_min($gc_count) as gc_count

  - name: Heap memory in use
    metrics:
      - process.runtime.go.mem.heap_inuse as $mem_in_use
    query:
      - $mem_in_use
    columns:
      mem_in_use: { unit: bytes }

  - name: Bytes of allocated heap objects
    metrics:
      - process.runtime.go.mem.heap_alloc as $heap_alloc
    query:
      - $heap_alloc
    columns:
      heap_alloc: { unit: bytes }

  - name: Bytes of heap memory obtained from the OS
    metrics:
      - process.runtime.go.mem.heap_sys as $heap_sys
    query:
      - $heap_sys
    columns:
      heap_sys: { unit: bytes }

  - name: Heap live objects
    metrics:
      - process.runtime.go.mem.heap_objects as $heap_objects
    query:
      - $heap_objects

  - name: Goroutines
    metrics:
      - process.runtime.go.goroutines as $goroutines
    query:
      - $goroutines

  - name: cgo calls
    metrics:
      - process.runtime.go.cgo.calls as $cgo_calls
    query:
      - delta($cgo_calls)

---
schema: v1
id: uptrace.go.sql_client_by_service_host
name: 'Go: SQL client'

table:
  metrics:
    - go.sql.query_timing as $query_timing
    - go.sql.connections_open as $conns_open
  query:
    - group by service.name
    - group by host.name
    - per_min($query_timing) as queries
    - p90($query_timing) as timing_p90
    - p99($query_timing) as timing_p99
    - $conns_open
  columns:
    timing_p90: { unit: milliseconds }
    timing_p99: { unit: milliseconds }

grid:
  - name: Number of queries
    metrics:
      - go.sql.query_timing as $query_timing
    query:
      - per_min($query_timing) as queries

  - name: Query percentiles
    metrics:
      - go.sql.query_timing as $query_timing
    query:
      - p50($query_timing) as p50
      - p90($query_timing) as p90
      - p99($query_timing) as p99
    columns:
      p50: { unit: milliseconds }
      p90: { unit: milliseconds }
      p99: { unit: milliseconds }
    chart: area

  - name: Number of established connections both in use and idle
    metrics:
      - go.sql.connections_open as $conns_open
    query:
      - $conns_open

  - name: Number of connections currently in use
    metrics:
      - go.sql.connections_in_use as $conns_in_use
    query:
      - $conns_in_use

  - name: Number of idle connections
    metrics:
      - go.sql.connections_idle as $conns_idle
    query:
      - $conns_idle

  - name: Connection wait count and duration
    metrics:
      - go.sql.connections_wait_count as $wait_count
      - go.sql.connections_wait_duration as $wait_dur
    query:
      - per_min($wait_count) as wait_count
      - per_min($wait_dur) as wait_dur
    columns:
      timing_p50: { unit: nanoseconds }

  - name: Number of connections closed due to SetMaxIdleConns
    metrics:
      - go.sql.connections_closed_max_idle as $closed_max_idle
    query:
      - per_min($closed_max_idle) as closed_max_idle

  - name: Number of connections closed due to SetConnMaxIdleTime
    metrics:
      - go.sql.connections_closed_max_idle_time as $closed_max_idle_time
    query:
      - per_min($closed_max_idle_time) as closed_max_idle_time

  - name: Number of connections closed due to SetConnMaxLifetime
    metrics:
      - go.sql.connections_closed_max_lifetime as $closed_max_lifetime
    query:
      - per_min($closed_max_lifetime) as closed_max_lifetime

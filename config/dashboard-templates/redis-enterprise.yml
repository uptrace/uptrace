schema: v1
id: uptrace.redis.nodes_by_cluster_node
name: 'Redis: Nodes'

table:
  gauges:
    - name: Nodes up
      description: Number of connected nodes out of total
      metrics:
        - node_up as $node_up
      query:
        - sum($node_up) as up
        - count($node_up) as total
      template: ${up} of ${total}

    - name: DBs up
      description: Number of databases up and running out of total
      metrics:
        - bdb_up as $bdb_up
      query:
        - sum($bdb_up) as up
        - count($bdb_up) as total
      template: ${up} of ${total}

    - name: Shards up
      description: Number of shards up and running out of total
      metrics:
        - redis_up as $redis_up
      query:
        - sum($redis_up) as up
        - count($redis_up) as total
      template: ${up} of ${total}

    - name: CPU usage
      description: CPU usage
      metrics:
        - node_cpu_idle as $cpu_idle
      query:
        - 1 - $cpu_idle as cpu_usage
      columns:
        cpu_usage: { unit: percents }

    - name: Used RAM
      description: Memory used by shard (in bigredis this includes flash)
      metrics:
        - redis_used_memory as $used_mem
      query:
        - $used_mem
      columns:
        used_mem: { unit: bytes }

    - name: Avail. RAM
      description: Available RAM in node (bytes) without taking into account overbooking
      metrics:
        - node_available_memory_no_overbooking as $available_mem
      query:
        - $available_mem
      columns:
        available_mem: { unit: bytes }

    - name: Requests rate
      description: Request rate handled by endpoints on nodes
      metrics:
        - node_total_req as $req
      query:
        - $req
      template: ${req}/sec

  metrics:
    - node_cpu_idle as $cpu_idle
    - node_available_memory as $mem_available
    - node_conns as $conns
    - node_total_req as $requests
    - node_ingress_bytes as $ingress
    - node_egress_bytes as $egress
  query:
    - group by cluster
    - group by node
    - 1 - $cpu_idle as cpu_usage
    - $mem_available
    - $conns
    - $requests
    - $ingress
    - $egress
  columns:
    cpu_usage: { unit: percents }
    mem_available: { unit: bytes }
    ingress: { unit: bytes }
    egress: { unit: bytes }

grid:
  - name: Redis used memory
    metrics:
      - redis_used_memory as $used_mem
    query:
      - $used_mem
    columns:
      used_mem: { unit: bytes }

  - name: Available memory
    metrics:
      - node_available_memory_no_overbooking as $available_mem
    query:
      - $available_mem
    columns:
      available_mem: { unit: bytes }

  # listener_total_req
  # listener_egress_bytes

  - name: CPU usage
    metrics:
      - node_cpu_idle as $cpu_idle
    query:
      - 1 - $cpu_idle as cpu_usage
    columns:
      cpu_usage: { unit: percents }

  - name: Number of connections
    metrics:
      - node_conns as $conns
    query:
      - $conns

  - name: Number of requests
    metrics:
      - node_total_req as $req
    query:
      - $req

  - name: Ingress bytes
    metrics:
      - node_ingress_bytes as $ingress
    query:
      - $ingress
    columns:
      ingress: { unit: bytes }

  - name: Egress bytes
    metrics:
      - node_egress_bytes as $egress
    query:
      - $egress
    columns:
      egress: { unit: bytes }

---
schema: v1
id: uptrace.redis.nodes_by_cluster_bdb
name: 'Redis: Databases'

table:
  metrics:
    - bdb_used_memory as $mem_used
    - bdb_conns as $conns
    - bdb_total_req as $req
    - bdb_ingress_bytes as $ingress
    - bdb_egress_bytes as $egress
  query:
    - group by cluster
    - group by bdb
    - $mem_used
    - $conns
    - $req
    - $ingress
    - $egress
  columns:
    mem_used: { unit: bytes }
    ingress: { unit: bytes }
    egress: { unit: bytes }

grid_gauges:
  - name: Used RAM
    description: Memory used by db (in bigredis this includes flash)
    metrics:
      - bdb_used_memory as $mem_used
    query:
      - $mem_used
    columns:
      mem_used: { unit: bytes }

  - name: RAM limit
    description: Configured RAM limit for the database
    metrics:
      - bdb_memory_limit as $mem_limit
    query:
      - $mem_limit
    columns:
      mem_limit: { unit: bytes }

  - name: Number of keys
    description: Number of keys in DB
    metrics:
      - bdb_no_of_keys as $num_key
    query:
      - $num_key

  - name: Requests rate
    description: Rate of all requests on DB (ops/sec)
    metrics:
      - bdb_total_req as $req
    query:
      - $req
    template: ${req}/sec

  - name: Ingress
    description: Incoming network traffic to DB
    metrics:
      - bdb_ingress_bytes as $ingress
    query:
      - $ingress
    columns:
      ingress: { unit: bytes }
    template: ${ingress}/sec

  - name: Egress
    description: Outgoing network traffic to DB
    metrics:
      - bdb_egress_bytes as $egress
    query:
      - $egress
    columns:
      egress: { unit: bytes }
    template: ${egress}/sec

  - name: RAM Fragm.
    description: RAM fragmentation ratio (RSS / allocated RAM)
    metrics:
      - bdb_mem_frag_ratio as $mem_frag
    query:
      - $mem_frag
    columns:
      mem_frag: { unit: percents }

grid:
  - name: Used memory
    metrics:
      - bdb_used_memory as $mem_used
    query:
      - $mem_used
    columns:
      mem_used: { unit: bytes }

  - name: Number of client connections
    metrics:
      - bdb_conns as $conns
    query:
      - $conns

  - name: Number of requests
    metrics:
      - bdb_total_req as $req
    query:
      - $req

  - name: Average latency or read/write operations
    metrics:
      - bdb_avg_read_latency as $read_latency
      - bdb_avg_write_latency as $write_latency
    query:
      - $read_latency
      - $write_latency

  - name: Ingress bytes
    metrics:
      - bdb_ingress_bytes as $ingress
    query:
      - $ingress
    columns:
      ingress: { unit: bytes }

  - name: Egress bytes
    metrics:
      - bdb_egress_bytes as $egress
    query:
      - $egress
    columns:
      egress: { unit: bytes }

  - name: Number of evicted keys
    metrics:
      - redis_evicted_keys as $evicted_keys
    query:
      - delta($evicted_keys) as evicted_keys

  - name: RAM fragmentation ratio (RSS / allocated RAM)
    metrics:
      - bdb_mem_frag_ratio as $mem_frag
    query:
      - $mem_frag
    columns:
      mem_frag: { unit: percents }

  - name: Redis lua scripting heap size
    metrics:
      - bdb_mem_size_lua as $lua_mem
    query:
      - $lua_mem
    columns:
      lua_mem: { unit: bytes }

---
schema: v1
id: uptrace.redis.shards_by_cluster_bdb_node
name: 'Redis: Shards'

table:
  metrics:
    - redis_used_memory as $mem_used
    - redis_mem_fragmentation_ratio as $mem_frag
    - redis_connected_clients as $clients
    - redis_evicted_keys as $evicted_keys
  query:
    - group by cluster
    - group by bdb
    - group by node
    - $mem_used
    - $clients
    - delta($evicted_keys) as evicted_keys
    - $mem_frag
  columns:
    mem_used: { unit: bytes }
    mem_frag: { unit: percents }

grid_gauges:
  - name: Used RAM
    description: redis_used_memory	Memory used by shard (in bigredis this includes flash)
    metrics:
      - redis_used_memory as $mem_used
    query:
      - $mem_used
    columns:
      mem_used: { unit: bytes }

  - name: RAM Fragm.
    description: Memory fragmentation ratio
    metrics:
      - redis_mem_fragmentation_ratio as $fragmentation
    query:
      - $fragmentation
    columns:
      fragmentation: { unit: percents }

  - name: CPU usage
    description: Shard process CPU usage
    metrics:
      - redis_process_cpu_usage_percent as $cpu_usage
    query:
      - $cpu_usage
    template: ${cpu_usage}%

  - name: Clients
    description: Number of client connections to the specific shard
    metrics:
      - redis_connected_clients as $clients
    query:
      - $clients

  - name: Slaves
    description: Number of connected slaves
    metrics:
      - redis_connected_slaves as $slaves
    query:
      - $slaves

  - name: DB Keys
    description: Total key count in the DB
    metrics:
      - redis_db_keys as $db_keys
    query:
      - $db_keys

  - name: Defrag
    description: Automatic memory defragmentation current aggressiveness (% cpu)
    metrics:
      - redis_active_defrag_running as $defrag
    query:
      - $defrag

grid:
  - name: Used memory
    metrics:
      - redis_used_memory as $mem_used
    query:
      - $mem_used
    columns:
      mem_used: { unit: bytes }

  - name: RSS memory
    metrics:
      - redis_used_memory_rss as $rss
    query:
      - $rss
    columns:
      rss: { unit: bytes }

  - name: Memory fragmentation ratio
    metrics:
      - redis_mem_fragmentation_ratio as $fragmentation
    query:
      - $fragmentation
    columns:
      fragmentation: { unit: percents }

  - name: Shard process CPU usage
    metrics:
      - redis_process_cpu_usage_percent as $cpu_usage
    query:
      - $cpu_usage

  - name: Keyspace read hits and misses
    metrics:
      - redis_keyspace_read_hits as $hits
      - redis_keyspace_read_misses as $misses
    query:
      - delta($hits) as hits
      - delta($misses) as misses
      - hits / (hits + misses) as hit_rate
    columns:
      hit_rate: { unit: percents }

  - name: DB Keys
    metrics:
      - redis_db_keys as $db_keys
    query:
      - $db_keys

  - name: DB evicted keys
    metrics:
      - redis_evicted_keys as $evicted_keys
    query:
      - delta($evicted_keys) as evicted_keys

  - name: DB expired keys
    metrics:
      - redis_expired_keys as $expired_keys
    query:
      - delta($expired_keys) as expired_keys

  - name: Number of keys that were trimmed in the current or last resharding process
    metrics:
      - redis_keys_trimmed as $trimmed_keys
    query:
      - $trimmed_keys

  - name: Total number of processed commands
    metrics:
      - redis_total_commands_processed as $cmds
    query:
      - delta($cmds) as cmds

  - name: Number of bytes received by the shard
    metrics:
      - redis_total_net_input_bytes as $input
    query:
      - delta($input) as input
    columns:
      input: { unit: bytes }

  - name: Number of bytes sent by the shard
    metrics:
      - redis_total_net_output_bytes as $output
    query:
      - delta($output) as output
    columns:
      output: { unit: bytes }

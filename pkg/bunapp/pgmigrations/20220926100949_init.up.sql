CREATE EXTENSION IF NOT EXISTS btree_gin

--==============================================================================
--bun:split

CREATE TABLE users (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

  username varchar(500),
  email varchar(500),

  password varchar(500),
  avatar varchar(2000) NOT NULL,

  notify_by_email boolean NOT NULL,

  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

--bun:split

CREATE UNIQUE INDEX users_username_unq ON users (username);

--bun:split

CREATE UNIQUE INDEX users_email_unq ON users (email);

--==============================================================================
--bun:split

CREATE TABLE projects (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

  name varchar(500) NOT NULL,
  token varchar(500) NOT NULL,
  pinned_attrs text[],
  group_by_env boolean DEFAULT FALSE,
  group_funcs_by_service boolean DEFAULT FALSE,

  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

--bun:split

CREATE UNIQUE INDEX projects_token_unq ON projects (token);

--==============================================================================
--bun:split

CREATE TABLE user_project_data (
  user_id int8 NOT NULL REFERENCES users (id) ON DELETE CASCADE,
  project_id int4 NOT NULL REFERENCES projects (id) ON DELETE CASCADE,

  notify_on_new_errors boolean NOT NULL DEFAULT TRUE,
  notify_on_recurring_errors boolean NOT NULL DEFAULT TRUE,
  notify_on_metrics boolean NOT NULL DEFAULT TRUE,

  PRIMARY KEY (user_id, project_id)
);

--==============================================================================
--bun:split

CREATE TABLE saved_views (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

  user_id int8 NOT NULL REFERENCES users (id) ON DELETE CASCADE,
  project_id int4 NOT NULL REFERENCES projects (id) ON DELETE CASCADE,

  name varchar(500),
  route varchar(100),
  params jsonb NOT NULL,
  query jsonb NOT NULL,
  pinned boolean NOT NULL,

  created_at timestamptz NOT NULL DEFAULT now()
);

--bun:split

CREATE INDEX saved_views_project_id_idx ON saved_views (project_id);

--==============================================================================
--bun:split

CREATE TABLE pinned_facets (
  user_id int8 NOT NULL REFERENCES users (id) ON DELETE CASCADE,
  attr varchar(500),
  unpinned boolean NOT NULL DEFAULT FALSE,

  PRIMARY KEY (user_id, attr)
);

--==============================================================================
--bun:split

DO $$ BEGIN
  CREATE TYPE public.monitor_state_enum AS ENUM (
    'active',
    'paused',
    'firing',
    'no-data',
    'failed'
  );
EXCEPTION
  WHEN duplicate_object THEN NULL;
END $$;

--bun:split

DO $$ BEGIN
  CREATE TYPE public.monitor_type_enum AS ENUM (
    'metric',
    'error'
  );
EXCEPTION
  WHEN duplicate_object THEN NULL;
END $$;

--bun:split

CREATE TABLE monitors (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  project_id int4 NOT NULL REFERENCES projects (id) ON DELETE CASCADE,

  name varchar(1000) NOT NULL,
  state monitor_state_enum NOT NULL DEFAULT 'active',

  notify_everyone_by_email boolean NOT NULL,

  type monitor_type_enum NOT NULL,
  params jsonb,

  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz
);

--==============================================================================
--bun:split

DO $$ BEGIN
  CREATE TYPE public.notif_channel_type_enum AS ENUM (
    'slack',
    'webhook',
    'alertmanager'
  );
EXCEPTION
  WHEN duplicate_object THEN NULL;
END $$;

--bun:split

DO $$ BEGIN
  CREATE TYPE public.notif_channel_state_enum AS ENUM (
    'draft',
    'delivering',
    'paused',
    'disabled'
  );
EXCEPTION
  WHEN duplicate_object THEN NULL;
END $$;

--bun:split

CREATE TABLE notif_channels (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  project_id int8 NOT NULL REFERENCES projects (id) ON DELETE CASCADE,

  name varchar(500),
  type notif_channel_type_enum NOT NULL,
  state notif_channel_state_enum NOT NULL DEFAULT 'delivering',
  params jsonb
);

--bun:split

CREATE TABLE monitor_channels (
  monitor_id int8 NOT NULL REFERENCES monitors (id) ON DELETE CASCADE,
  channel_id int8 NOT NULL REFERENCES notif_channels (id) ON DELETE CASCADE,

  PRIMARY KEY (monitor_id, channel_id)
);

--==============================================================================
--bun:split

DO $$ BEGIN
  CREATE TYPE public.trackable_model_enum AS ENUM (
    'Span',
    'SpanGroup',
    'Project',
    'MetricMonitor'
  );
EXCEPTION
  WHEN duplicate_object THEN NULL;
END $$;

--bun:split

DO $$ BEGIN
  CREATE TYPE public.alert_state_enum AS ENUM (
    'open',
    'closed'
  );
EXCEPTION
  WHEN duplicate_object THEN NULL;
END $$;

--bun:split

DO $$ BEGIN
  CREATE TYPE public.alert_type_enum AS ENUM (
    'error',
    'metric'
  );
EXCEPTION
  WHEN duplicate_object THEN NULL;
END $$;

--bun:split

CREATE TABLE alerts (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  project_id int4 NOT NULL REFERENCES projects (id) ON DELETE CASCADE,
  dedup_hash int8 NOT NULL,

  name varchar(1000) NOT NULL,
  state alert_state_enum NOT NULL,

  monitor_id int8 REFERENCES monitors (id) ON DELETE CASCADE,
  trackable_model trackable_model_enum,
  trackable_id int8,

  attrs jsonb,
  attrs_hash int8 NOT NULL,
  tsv tsvector,

  type alert_type_enum NOT NULL,
  params jsonb,

  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

--bun:split

CREATE INDEX alerts_project_id_tsv_idx ON alerts
USING GIN (project_id, tsv);

--bun:split

CREATE INDEX alerts_monitor_id_idx ON alerts (monitor_id);

--bun:split

CREATE UNIQUE INDEX alerts_dedup_hash_unq ON alerts (dedup_hash)
WHERE dedup_hash IS NOT NULL;

--==============================================================================
--bun:split

DO $$ BEGIN
  CREATE TYPE public.alert_event_name_enum AS ENUM (
    'created',
    'state-changed',
    'recurring'
  );
EXCEPTION
  WHEN duplicate_object THEN NULL;
END $$;

--bun:split

CREATE TABLE alert_events (
  id int8 PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,

  user_id int8 REFERENCES users (id) ON DELETE CASCADE,
  project_id int4 NOT NULL REFERENCES projects (id) ON DELETE CASCADE,
  alert_id int8 NOT NULL REFERENCES alerts (id) ON DELETE CASCADE,

  name alert_event_name_enum NOT NULL,
  params jsonb,

  created_at timestamptz NOT NULL DEFAULT now()
);

--==============================================================================
--bun:split

CREATE TABLE taskq_jobs
(
  id bytea NOT NULL PRIMARY KEY,
  queue varchar(500) NOT NULL,
  run_at timestamptz,
  reserved_count int2 NOT NULL,
  reserved_at timestamptz,
  data bytea NOT NULL
);

--bun:split

CREATE INDEX IF NOT EXISTS taskq_jobs_queue_run_at_reserved_at_idx
ON taskq_jobs (queue, run_at, reserved_at);
